EAT-DA-BURGER TEST RESULTS TEMPLATE

d = deferred
e = met by enhancement
f = failed
p = passed
s = skipped
w = waiting for further work

Make sure you're working in a copy of this for a homework assignment! 

~~~~~~~~~~~~~~~~~~~~~~~~TIER 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Static Requirements
===================
[] Sequelize builds the burgers table
[] devoured field has default value 'false'
[] config.json has local MySQL info in 'production' section
[] config.json has JawsBD info in 'production' section
[] burgers.js uses sequelize calls, rather than calls to orm.js
[] orm.js removed

	
Functional Requirements
=======================
[] App creates DB correctly
[] Enables user to submits a burger's name
[] After entry, displays the burger on the left side of the page -- the waiting area
[] Each burger in the waiting area has a `Devour it!` button.
[] A burger will move to the right side of the page when the user clicks button.
[] Each burger in the waiting area has a number representing order of entry as well as a name.
{} App stores every burger and state (whether devoured or not) in database.


~~~~~~~~~~~~~~~~~~~~~~~~TIER 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Static Requirements
===================
[] App has customer model
[] Customer model is associated with the Burger model

Functional Requirements
=======================
[] 'App does something with customer - burger association'

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Bonus
=====
[] Model validates that burger's name cannot be null
[] Model validates that burger's devoured status is false by default
[] Model validates that customer's name cannot be null
[] App orders the Burgers returned to the user in alphabetical order using the Sequelize "order" option.

Functionality
=============
[] App initializes globals correctly
[] App reinitializes globals correctly
[] Front end rejects burger names over 25 characters in length
[] Front end rejects empty submission of a burger
[] Front end trims excess white space from new burger name
[] Back end prevents burger names over 25 characters in length
[] Back end prevents addition of a burger with no name
[] Back end trims excess white space from new burger name
[] All unit tests pass

Display
=======
[] Page closely resembles demo video

Installation
============
[] Package installs correctly in a new directory
	() node packages
	() database
[] All dependencies are listed in package.json

Cleanup
=======
[] JS delinted

Heroku
======
[] Page performs on load as expected
[] Page performs after reload as expected